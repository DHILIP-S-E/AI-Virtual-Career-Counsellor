import sqlite3
import os
import json
import pandas as pd
from typing import List, Dict, Any, Optional, Union
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CareerDatabase:
    """Class to handle all database operations for the AI Career Counselor"""
    
    def __init__(self, db_path: str = "database/career_counselor.db"):
        """
        Initialize the database connection
        
        Args:
            db_path: Path to the SQLite database file
        """
        # Ensure the database directory exists
        os.makedirs(os.path.dirname(db_path), exist_ok=True)
        
        self.db_path = db_path
        self.conn = None
        
        # Initialize the database
        self._initialize_db()
    
    def _get_connection(self) -> sqlite3.Connection:
        """Get a connection to the database"""
        if self.conn is None:
            self.conn = sqlite3.connect(self.db_path)
            # Enable foreign keys
            self.conn.execute("PRAGMA foreign_keys = ON")
            # Configure connection to return rows as dictionaries
            self.conn.row_factory = sqlite3.Row
        return self.conn
        
    def _initialize_db(self) -> None:
        """Initialize the database with schema and sample data"""
        try:
            conn = self._get_connection()
            
            # Check if the database is already initialized
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='careers'")
            if cursor.fetchone() is not None:
                logger.info("Database already initialized")
                return
            
            # Execute schema.sql to create tables
            with open(os.path.join(os.path.dirname(__file__), "schema.sql"), "r") as f:
                schema_sql = f.read()
                conn.executescript(schema_sql)
            
            # Load sample data from CSV
            self._load_sample_data()
            
            logger.info("Database initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing database: {str(e)}")
            raise
            
    def _load_sample_data(self) -> None:
        """Load sample career data from CSV file"""
        try:
            # Read the CSV file
            csv_path = os.path.join(os.path.dirname(__file__), "career_data.csv")
            career_data = pd.read_csv(csv_path)
            
            conn = self._get_connection()
            cursor = conn.cursor()
            
            # Insert career fields
            unique_fields = career_data["field"].unique()
            for field in unique_fields:
                cursor.execute(
                    "INSERT INTO career_fields (name, description) VALUES (?, ?)",
                    (field, f"Career field related to {field}")
                )
            
            # Insert careers and related data
            for _, row in career_data.iterrows():
                # Get the field_id
                cursor.execute("SELECT id FROM career_fields WHERE name = ?", (row["field"],))
                field_id = cursor.fetchone()[0]
                
                # Insert career
                cursor.execute(
                    """
                    INSERT INTO careers (title, field_id, description, salary, growth_rate, education_level)
                    VALUES (?, ?, ?, ?, ?, ?)
                    """,
                    (row["title"], field_id, row["description"], row["salary"], 
                     row["growth_rate"], row["education_level"])
                )
                career_id = cursor.lastrowid
                
                # Insert skills
                skills = row["skills"].split(",")
                for i, skill in enumerate(skills):
                    cursor.execute(
                        "INSERT INTO career_skills (career_id, skill, importance) VALUES (?, ?, ?)",
                        (career_id, skill.strip(), 10 - i)  # Higher importance for earlier skills
                    )
                
                # Insert roadmap steps
                roadmap = json.loads(row["roadmap"])
                for i, step in enumerate(roadmap):
                    cursor.execute(
                        """
                        INSERT INTO roadmap_steps (career_id, step_order, title, description, duration)
                        VALUES (?, ?, ?, ?, ?)
                        """,
                        (career_id, i+1, step["title"], step["description"], step["duration"])
                    )
                    step_id = cursor.lastrowid
                    
                    # Insert resources for this step
                    if "resources" in step:
                        for resource in step["resources"]:
                            cursor.execute(
                                """
                                INSERT INTO learning_resources 
                                (step_id, title, url, resource_type, is_free)
                                VALUES (?, ?, ?, ?, ?)
                                """,
                                (step_id, resource["title"], resource["url"], 
                                 resource["type"], resource["is_free"])
                            )
            
            conn.commit()
            logger.info("Sample data loaded successfully")
        except Exception as e:
            logger.error(f"Error loading sample data: {str(e)}")
            raise
            
    def get_career_by_title(self, title: str) -> Optional[Dict[str, Any]]:
        """Get a career by its title"""
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT c.*, cf.name as field_name
                FROM careers c
                JOIN career_fields cf ON c.field_id = cf.id
                WHERE c.title = ?
            """, (title,))
            
            row = cursor.fetchone()
            if not row:
                return None
                
            career = dict(row)
            
            # Get skills for this career
            cursor.execute("""
                SELECT skill FROM career_skills
                WHERE career_id = ?
                ORDER BY importance DESC
            """, (career["id"],))
            
            career["skills"] = [row["skill"] for row in cursor.fetchall()]
            
            # Get roadmap steps for this career
            cursor.execute("""
                SELECT * FROM roadmap_steps
                WHERE career_id = ?
                ORDER BY step_order
            """, (career["id"],))
            
            roadmap = []
            for step_row in cursor.fetchall():
                step = dict(step_row)
                
                # Get resources for this step
                cursor.execute("""
                    SELECT * FROM learning_resources
                    WHERE step_id = ?
                """, (step["id"],))
                
                resources = [dict(res) for res in cursor.fetchall()]
                step["resources"] = resources
                roadmap.append(step)
                
            career["roadmap"] = roadmap
            
            return career
        except Exception as e:
            logger.error(f"Error getting career by title: {str(e)}")
            return None
    
    def search_careers(self, keyword: str) -> List[Dict[str, Any]]:
        """Search careers by keyword"""
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            search_term = f"%{keyword}%"
            cursor.execute("""
                SELECT DISTINCT c.*, cf.name as field_name
                FROM careers c
                JOIN career_fields cf ON c.field_id = cf.id
                LEFT JOIN career_skills cs ON c.id = cs.career_id
                WHERE c.title LIKE ? OR c.description LIKE ? OR cs.skill LIKE ?
                ORDER BY c.title
            """, (search_term, search_term, search_term))
            
            careers = []
            for row in cursor.fetchall():
                career = dict(row)
                
                # Get skills for this career
                cursor.execute("""
                    SELECT skill FROM career_skills
                    WHERE career_id = ?
                    ORDER BY importance DESC
                """, (career["id"],))
                
                career["skills"] = [row["skill"] for row in cursor.fetchall()]
                careers.append(career)
                
            return careers
        except Exception as e:
            logger.error(f"Error searching careers: {str(e)}")
            return []
    
    def get_careers_by_field(self, field: str) -> List[Dict[str, Any]]:
        """Get careers by field"""
        try:
            conn = self._get_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT c.*, cf.name as field_name
                FROM careers c
                JOIN career_fields cf ON c.field_id = cf.id
                WHERE cf.name = ?
                ORDER BY c.title
            """, (field,))
            
            careers = []
            for row in cursor.fetchall():
                career = dict(row)
                
                # Get skills for this career
                cursor.execute("""
                    SELECT skill FROM career_skills
                    WHERE career_id = ?
                    ORDER BY importance DESC
                """, (career["id"],))
                
                career["skills"] = [row["skill"] for row in cursor.fetchall()]
                careers.append(career)
                
            return careers
        except Exception as e:
            logger.error(f"Error getting careers by field: {str(e)}")
            return []